{"version":3,"sources":["constants/index.js","components/AutosuggestField.js","utils/storageHelper.js","constants/colors.js","constants/status.js","utils/colorHelper.js","components/Dashboard.js","utils/scoreHelper.js","App.js","index.js"],"names":["MENTOR_STORAGE_KEY","MAX_SUGGESTIONS","renderInputComponent","inputProps","classes","_inputProps$inputRef","inputRef","ref","other","Object","objectWithoutProperties","react_default","a","createElement","TextField_default","assign","fullWidth","InputProps","node","input","renderSuggestion","suggestion","_ref","query","isHighlighted","matches","match","parts","parse","MenuItem_default","selected","component","map","part","index","highlight","key","String","style","fontWeight","text","getSuggestions","value","suggestions","inputValue","trim","toLowerCase","inputLength","length","count","filter","keep","slice","getSuggestionValue","AutosuggestField","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSuggestionsFetchRequested","_ref2","setState","handleSuggestionsClearRequested","handleChange","name","event","_ref3","storageKey","item","newValue","localStorage","setItem","onClickSearch","defineProperty","defaultValue","getItem","state","autosuggestProps","onSuggestionsFetchRequested","onSuggestionsClearRequested","className","root","dist_default","placeholder","onChange","theme","container","suggestionsContainerOpen","suggestionsList","renderSuggestionsContainer","options","Paper_default","containerProps","square","children","React","Component","withStyles","flexGrow","position","zIndex","marginTop","spacing","unit","left","right","display","margin","padding","listStyleType","CHECKED","IN_PROGRESS","CHECKING","NO_REPORT","TODO","getStatusColor","taskStatus","isScore","colorResult","status","color","isNumber","val","Number","isNaN","parseFloat","getTooltipMessage","comment","rateBy","concat","getStudentDashboard","mentorName","taskList","selectedMentor","studentsScore","items","entries","task","_task","slicedToArray","taskKey","taskData","href","taskLink","getDashboardHeader","students","student","_student","studentKey","studentData","_task2","tasks","score","Tooltip_default","title","disableHoverListener","bgcolor","colorHelper","getStudentDashboardRow","StudentDashboard","selectedMentorName","App","handleSearch","bind","assertThisInitialized","Grid_default","xs","md","lg","components_AutosuggestField","keys","overflow","Dashboard","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1c02c302.chunk.js","sourcesContent":["// eslint-disable-next-line import/prefer-default-export\nexport const MENTOR_STORAGE_KEY = 'mentor-dashboard';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Autosuggest from 'react-autosuggest';\nimport match from 'autosuggest-highlight/match';\nimport parse from 'autosuggest-highlight/parse';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { saveToStorage, getFromStorage } from '../utils/storageHelper';\nimport { MENTOR_STORAGE_KEY } from '../constants';\n\nconst MAX_SUGGESTIONS = 5;\n\nfunction renderInputComponent (inputProps) {\n  const {\n    classes, inputRef = () => {}, ref, ...other\n  } = inputProps;\n\n  return (\n    <TextField\n      fullWidth\n      InputProps={{\n        inputRef: node => {\n          ref(node);\n          inputRef(node);\n        },\n        classes: {\n          input: classes.input\n        }\n      }}\n      {...other}\n    />\n  );\n}\n\nfunction renderSuggestion (suggestion, { query, isHighlighted }) {\n  const matches = match(suggestion, query);\n  const parts = parse(suggestion, matches);\n\n  return (\n    <MenuItem selected={isHighlighted} component=\"div\">\n      <div>\n        {parts.map((part, index) => (part.highlight ? (\n          <span key={String(index)} style={{ fontWeight: 'bold' }}>\n            {part.text}\n          </span>\n        ) : (\n          <strong key={String(index)} style={{ fontWeight: 200 }}>\n            {part.text}\n          </strong>\n        )))}\n      </div>\n    </MenuItem>\n  );\n}\n\nfunction getSuggestions (value, suggestions) {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  let count = 0;\n\n  return inputLength === 0\n    ? []\n    : suggestions.filter(suggestion => {\n      const keep = count < MAX_SUGGESTIONS &&\n        suggestion.slice(0, inputLength).toLowerCase() === inputValue;\n\n      if (keep) {\n        count += 1;\n      }\n\n      return keep;\n    });\n}\n\nfunction getSuggestionValue (suggestion) {\n  return suggestion;\n}\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1\n  },\n  container: {\n    position: 'relative'\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing.unit,\n    left: 0,\n    right: 0\n  },\n  suggestion: {\n    display: 'block'\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none'\n  }\n});\n\nclass AutosuggestField extends React.Component {\n  constructor (props) {\n    super(props);\n\n    const defaultValue = getFromStorage(MENTOR_STORAGE_KEY) || '';\n    if (defaultValue) this.props.onClickSearch(defaultValue);\n\n    this.state = {\n      value: defaultValue,\n      suggestions: []\n    };\n  }\n\n  handleSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value, this.props.suggestions)\n    });\n  };\n\n  handleSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  handleChange = name => (event, { newValue }) => {\n    saveToStorage(MENTOR_STORAGE_KEY, newValue);\n    this.props.onClickSearch(newValue);\n    this.setState({\n      [name]: newValue\n    });\n  };\n\n  render () {\n    const {\n      classes\n    } = this.props;\n\n    const autosuggestProps = {\n      renderInputComponent,\n      suggestions: this.state.suggestions,\n      onSuggestionsFetchRequested: this.handleSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.handleSuggestionsClearRequested,\n      getSuggestionValue,\n      renderSuggestion\n    };\n\n    return (\n      <div className={classes.root}>\n        <Autosuggest\n          {...autosuggestProps}\n          inputProps={{\n            classes,\n            placeholder: 'Mentor search',\n            value: this.state.value,\n            onChange: this.handleChange('value')\n          }}\n          theme={{\n            container: classes.container,\n            suggestionsContainerOpen: classes.suggestionsContainerOpen,\n            suggestionsList: classes.suggestionsList,\n            suggestion: classes.suggestion\n          }}\n          renderSuggestionsContainer={options => (\n            <Paper {...options.containerProps} square>\n              {options.children}\n            </Paper>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nAutosuggestField.propTypes = {\n  classes: PropTypes.object.isRequired,\n  suggestions: PropTypes.array,\n  onClickSearch: PropTypes.func\n};\n\nexport default withStyles(styles)(AutosuggestField);\n","export function saveToStorage (storageKey, item) {\n  localStorage.setItem(storageKey, item);\n}\n\nexport function getFromStorage (storageKey) {\n  return localStorage.getItem(storageKey);\n}\n","export const CHECKED = '#00BD73';\nexport const IN_PROGRESS = '#EDD04E';\nexport const CHECKING = '#F76F54';\nexport const NO_REPORT = '#FC4723';\nexport const TODO = '#C6C3C2';\n","export const CHECKED = 'Checked';\nexport const IN_PROGRESS = 'In Progress';\nexport const CHECKING = 'Checking';\nexport const TODO = 'ToDo';\n","import * as color from '../constants/colors';\nimport * as status from '../constants/status';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function getStatusColor (taskStatus, isScore) {\n  let colorResult = '';\n  switch (taskStatus) {\n    case status.CHECKED:\n      if (isScore) colorResult = color.CHECKED;\n      else colorResult = color.NO_REPORT;\n      break;\n    case status.IN_PROGRESS: colorResult = color.IN_PROGRESS;\n      break;\n    case status.CHECKING:\n      if (isScore) colorResult = color.CHECKING;\n      else colorResult = color.NO_REPORT;\n      break;\n    default:\n      colorResult = color.TODO;\n  }\n  if (isScore && colorResult !== color.CHECKED) colorResult = color.CHECKED;\n\n  return colorResult;\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport * as colorHelper from '../utils/colorHelper';\nimport * as scoreHelper from '../utils/scoreHelper';\n\nfunction isNumber (val) {\n  return !Number.isNaN(Number.parseFloat(val));\n}\n\nfunction getTooltipMessage (comment, rateBy) {\n  return `${comment || ''} by @${rateBy}`;\n}\n\nfunction getDashboardHeader (taskList) {\n  return Object.entries(taskList).map(task => {\n    const [taskKey, taskData] = task;\n    return (\n      <th key={taskKey}>\n        <a href={taskData.taskLink}>{taskKey}</a>\n      </th>\n    );\n  });\n}\n\nfunction getStudentDashboardRow (selectedMentor, taskList) {\n  return Object.entries(selectedMentor.students).map(student => {\n    const [studentKey, studentData] = student;\n    return (\n      <tr key={studentKey}>\n        <td>{studentKey}</td>\n        {\n          Object.entries(taskList).map((task, index) => {\n            const [taskKey, taskData] = task;\n            const {\n              rateBy,\n              comment,\n              score\n            } = studentData.tasks[taskKey] || {};\n            const {\n              taskStatus\n            } = taskData;\n            return (\n              <Tooltip\n                key={`${studentKey}-${index}`}\n                title={getTooltipMessage(comment, rateBy)}\n                disableHoverListener={!isNumber(score)}\n              >\n                <td bgcolor={colorHelper.getStatusColor(taskStatus, isNumber(score))}>\n                  {score}\n                </td>\n              </Tooltip>\n            );\n          })\n        }\n      </tr>\n    );\n  });\n}\n\nfunction getStudentDashboard (mentorName, taskList) {\n  const selectedMentor = scoreHelper.getMentor(mentorName);\n  if (!selectedMentor) return (<div>Mentor @<b>{mentorName}</b> not found!</div>);\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th></th>\n          { getDashboardHeader(taskList) }\n        </tr>\n      </thead>\n      <tbody>\n        { getStudentDashboardRow(selectedMentor, taskList) }\n      </tbody>\n    </table>\n  );\n}\n\nclass StudentDashboard extends Component {\n  render () {\n    const {\n      selectedMentorName\n    } = this.props;\n    return (\n      <div>\n        {\n          getStudentDashboard(selectedMentorName, scoreHelper.getTaskList(selectedMentorName))\n        }\n      </div>\n    );\n  }\n}\n\nStudentDashboard.propTypes = {\n  selectedMentorName: PropTypes.string\n};\n\nexport default StudentDashboard;\n","import studentsScore from '../data.json';\n\nexport function getMentor (name) {\n  return studentsScore.items[name];\n}\n\nexport function getTaskList () {\n  return studentsScore.tasks;\n}\n\nexport function getMentorList () {\n  return Object.keys(studentsScore.items);\n}\n","import React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\n\nimport AutosuggestField from './components/AutosuggestField';\nimport Dashboard from './components/Dashboard';\nimport * as scoreHelper from './utils/scoreHelper';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.handleSearch = this.handleSearch.bind(this);\n    this.state = {\n      selectedMentorName: ''\n    };\n  }\n\n  handleSearch (val) {\n    this.setState({ selectedMentorName: val });\n  }\n\n  render () {\n    return (\n      <Grid container spacing={16}>\n        <Grid item xs={12} md={5} lg={3}>\n          <AutosuggestField\n            onClickSearch={this.handleSearch}\n            suggestions={scoreHelper.getMentorList()}\n          />\n        </Grid>\n        <Grid item xs={12} style={{ overflow: 'auto' }}>\n          <Dashboard selectedMentorName={this.state.selectedMentorName} />\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}